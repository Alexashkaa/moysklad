{"version":3,"sources":["../src/matchers.js"],"names":["UUID_REGEX","module","exports","ent","id","test","meta","type","uuid","col","href","size"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,6EAAnB;;AAEA;AACAC,OAAOC,OAAP,GAAiB;AACf,YAAUC,OAAOA,OAAOA,IAAIC,EAAX,IAAiBJ,WAAWK,IAAX,CAAgBF,IAAIC,EAApB,CAAjB,IAA4CD,IAAIG,IAAhD,IAAwDH,IAAIG,IAAJ,CAASC,IADnE;AAEf,UAAQC,SAAQ,OAAOA,KAAP,KAAgB,QAAhB,IAA4BR,WAAWK,IAAX,CAAgBG,KAAhB,CAF7B;AAGf;AACA;AACA;AACA;AACA;AACA,yBAAuBC,OAAOA,OAAOA,IAAIH,IAAX,IAAmBG,IAAIH,IAAJ,CAASI,IAA5B,IAAoCD,IAAIH,IAAJ,CAASK;AAR5D,CAAjB;;AAWA","file":"matchers.js","sourcesContent":["'use strict'\n\nconst UUID_REGEX = /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/\n\n// TODO Убедиться что указан необходимый минимум полей для сущностей\nmodule.exports = {\n  'entity': ent => ent && ent.id && UUID_REGEX.test(ent.id) && ent.meta && ent.meta.type,\n  'uuid': uuid => typeof uuid === 'string' && UUID_REGEX.test(uuid),\n  // 'uuid/uuid': id => {\n  //   if (typeof id !== 'string') { return false }\n  //   let [dicId, entId] = id.split('/')\n  //   return UUID_REGEX.test(dicId) && UUID_REGEX.test(entId)\n  // },\n  'Moysklad.Collection': col => col && col.meta && col.meta.href && col.meta.size\n}\n\n// TODO Проверка типов \"Moysklad.\" на основании модели\n"]}