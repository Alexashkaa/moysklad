{"version":3,"sources":["../../src/tools/buildQuery.js"],"names":["buildFilter","require","isPlainObject","module","exports","buildQuery","query","Object","keys","reduce","res","key","addPart","val","indexOf","Error","concat","encodeURIComponent","filter","Array","forEach","map","kv","join"],"mappings":"AAAA;;AAEA,MAAMA,cAAcC,QAAQ,eAAR,CAApB;AACA,MAAMC,gBAAgBD,QAAQ,iBAAR,CAAtB;;AAEAE,OAAOC,OAAP,GAAiB,SAASC,UAAT,CAAqBC,KAArB,EAA4B;AAC3C,SAAOC,OAAOC,IAAP,CAAYF,KAAZ,EACJG,MADI,CACG,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpB,QAAIC,UAAUC,OAAO;AACnB,UAAI,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgCC,OAAhC,CAAwC,OAAOD,GAA/C,MAAwD,CAAC,CAA7D,EAAgE;AAC9D,cAAM,IAAIE,KAAJ,CAAU,0DAAV,CAAN;AACD;AACDL,YAAMA,IAAIM,MAAJ,CAAW,CAAC,CAACL,GAAD,EAAMM,mBAAmBJ,GAAnB,CAAN,CAAD,CAAX,CAAN;AACD,KALD;;AAOA,YAAQ,IAAR;AACE,WAAKF,QAAQ,QAAb;AACE,YAAIT,cAAcI,MAAMY,MAApB,CAAJ,EAAiCN,QAAQZ,YAAYM,MAAMY,MAAlB,CAAR,EAAjC,KACK,IAAI,OAAOZ,MAAMY,MAAb,KAAwB,QAA5B,EAAsCN,QAAQN,MAAMY,MAAd,EAAtC,KACA,MAAM,IAAIH,KAAJ,CAAU,oCAAV,CAAN;AACL;;AAEF,WAAKT,MAAMK,GAAN,KAAc,IAAnB;AACEC,gBAAQ,EAAR;AACA;;AAEF,WAAKN,MAAMK,GAAN,aAAsBQ,KAA3B;AACEb,cAAMK,GAAN,EAAWS,OAAX,CAAmBR,OAAnB;AACA;;AAEF;AACEA,gBAAQN,MAAMK,GAAN,CAAR;AAhBJ;;AAmBA,WAAOD,GAAP;AACD,GA7BI,EA6BF,EA7BE,EA8BJW,GA9BI,CA8BAC,MAAO,GAAEA,GAAG,CAAH,CAAM,IAAGA,GAAG,CAAH,CAAM,EA9BxB,EA+BJC,IA/BI,CA+BC,GA/BD,CAAP;AAgCD,CAjCD","file":"buildQuery.js","sourcesContent":["'use strict'\n\nconst buildFilter = require('./buildFilter')\nconst isPlainObject = require('./isPlainObject')\n\nmodule.exports = function buildQuery (query) {\n  return Object.keys(query)\n    .reduce((res, key) => {\n      let addPart = val => {\n        if (['string', 'number', 'boolean'].indexOf(typeof val) === -1) {\n          throw new Error('url query key value must to be string, number or boolean')\n        }\n        res = res.concat([[key, encodeURIComponent(val)]])\n      }\n\n      switch (true) {\n        case key === 'filter':\n          if (isPlainObject(query.filter)) addPart(buildFilter(query.filter))\n          else if (typeof query.filter === 'string') addPart(query.filter)\n          else throw new Error('filter must to be string or object')\n          break\n\n        case query[key] == null:\n          addPart('')\n          break\n\n        case query[key] instanceof Array:\n          query[key].forEach(addPart)\n          break\n\n        default:\n          addPart(query[key])\n      }\n\n      return res\n    }, [])\n    .map(kv => `${kv[0]}=${kv[1]}`)\n    .join('&')\n}\n"]}