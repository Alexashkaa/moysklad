{"version":3,"sources":["../../src/tools/aggregateMetadata.js"],"names":["have","require","getPropertyInfo","loadRows","CUSTOM_ENT_ID_REGEX","getFieldName","fieldName","toUpperCase","replace","module","exports","client","model","options","customEntityFilter","Metadata","updated","Date","formatVersion","typeMetadataPromises","Object","keys","types","filter","type","typeName","external","map","GET","then","metadata","thread1","p","typeMetadata","states","States","attrState","name","id","attributes","Attributes","attrMeta","customEntityMeta","fetchUri","href","customEntities","entName","CustomEntity","entityMeta","collection","limit","rows","reduce","res","row","match","exec","meta","Promise","all","aggregateMetadata"],"mappings":"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","file":"aggregateMetadata.js","sourcesContent":["'use strict'\n\nconst have = require('../have')\nconst getPropertyInfo = require('./getPropertyInfo')\nconst loadRows = require('./loadRows')\n\nconst CUSTOM_ENT_ID_REGEX = /\\/([^/]+)\\/([^/?]+)(?:\\?.+)?$/\n\nconst getFieldName = fieldName => fieldName\n  .toUpperCase()\n  .replace(/[^0-9a-zA-Zа-яА-Я_$]/g, '_')\n  .replace(/_{2,}/g, '_')\n  .replace(/_{1,}$/, '') // TODO Объединить последние два replace\n  .replace(/^_{1,}/, '')\n\nmodule.exports = async function aggregateMetadata () {\n  let { client, model, options = {} } = have(arguments, {\n    client: 'Obj', model: 'model', options: 'opt Obj'\n  })\n\n  let { customEntityFilter = () => true } = options\n\n  let Metadata = {\n    updated: new Date(),\n    formatVersion: '3.0.0'\n  }\n\n  // асинхронная загрузка метаданных внешних (доступных из API) сущностей\n  let typeMetadataPromises = Object.keys(model.types)\n    .filter(typeName => {\n      let type = model.types[typeName]\n      return type && type.external && getPropertyInfo(model, typeName, 'attributes')\n    })\n    .map(typeName => {\n      Metadata[typeName] = {}\n      return typeName\n    })\n    .map(typeName => client.GET(['entity', typeName, 'metadata']).then(metadata => ({\n      typeName, metadata\n    })))\n\n  // асинхронная загрузка пользовательских атрибутов и справочников\n  let thread1 = typeMetadataPromises.map(p => p.then(async typeMetadata => {\n    let { typeName, metadata } = typeMetadata\n    // type = Metadata.CustomerOrder\n    let type = Metadata[typeName]\n\n    if (metadata.states) {\n      // Metadata.CustomerOrder.States = {}\n      type.States = {}\n      // обработка метаданных сущности\n      for (let attrState of metadata.states) {\n        // Metadata.CustomerOrder.States.ОФОРМЛЕН = state.id\n        type.States[getFieldName(attrState.name)] = attrState.id\n      }\n    }\n\n    if (metadata.attributes) {\n      // Metadata.CustomerOrder.Attributes = {}\n      type.Attributes = {}\n      // обработка метаданных сущности\n      for (let attrMeta of metadata.attributes) {\n        // Metadata.CustomerOrder.Attributes.ИСТОЧНИК_ЗАКАЗА = attribute.id\n        type.Attributes[getFieldName(attrMeta.name)] = attrMeta.id\n        if (attrMeta.customEntityMeta) {\n          let customEntities = await client.fetchUri(attrMeta.customEntityMeta.href)\n          let entName = getFieldName(customEntities.name)\n          // заполнение пользовательского справочника (если не заполнен) и если не пропущен явно\n          if (!Metadata.CustomEntity[entName] && customEntityFilter(customEntities.name)) {\n            // Metadata.CustomEntity.ИСТОЧНИКИ_ЗАКАЗА = {}\n            Metadata.CustomEntity[entName] = {}\n            let collection = await client.fetchUri(customEntities.entityMeta.href)\n            let rows = await loadRows(client, collection, { limit: 100 })\n            rows.reduce((res, row) => {\n              let match = CUSTOM_ENT_ID_REGEX.exec(row.meta.href)\n              // Metadata.CustomEntity.ИСТОЧНИКИ_ЗАКАЗА.САЙТ = '{id}/{id}'\n              res[getFieldName(row.name)] = `${match[1]}/${match[2]}`\n              return res\n            }, Metadata.CustomEntity[entName])\n          }\n        }\n      }\n    }\n  }))\n\n  await Promise.all(thread1)\n\n  return Metadata\n}\n"]}