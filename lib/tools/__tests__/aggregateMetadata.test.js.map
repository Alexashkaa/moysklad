{"version":3,"sources":["../../../src/tools/__tests__/aggregateMetadata.test.js"],"names":["fs","require","path","test","aggregateMetadata","model","QueueStamp","Moysklad","t","ok","equals","end","skip","moysklad","compose","create","queue","customEntityFilter","includes","entName","metadata","writeFileSync","resolve","JSON","stringify"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,OAAOF,QAAQ,WAAR,CAAb;AACA,IAAMG,oBAAoBH,QAAQ,sBAAR,CAA1B;AACA,IAAMI,QAAQJ,QAAQ,gCAAR,CAAd;;AAEA,IAAMK,aAAaL,QAAQ,+BAAR,CAAnB;AACA,IAAMM,WAAWN,QAAQ,cAAR,CAAjB;;AAEAE,KAAK,yBAAL,EAAgC,aAAK;AACnCK,IAAEC,EAAF,CAAKL,iBAAL;AACAI,IAAEE,MAAF,QAAgBN,iBAAhB,yCAAgBA,iBAAhB,GAAmC,UAAnC;AACAI,IAAEG,GAAF;AACD,CAJD;;AAMAR,KAAKS,IAAL,CAAU,mBAAV;AAAA,uDAA+B,iBAAMJ,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBK,oBADyB,GACdN,SAASO,OAAT,CAAiBR,UAAjB,EAA6BS,MAA7B,CAAoC,EAAEC,OAAO,IAAT,EAApC,CADc;AAAA;AAAA,mBAERZ,kBAAkBS,QAAlB,EAA4BR,KAA5B,EAAmC;AACtDY,kCAAoB;AAAA,uBAAW,CAAC,CAAC,QAAD,EAAW,QAAX,EAAqBC,QAArB,CAA8BC,OAA9B,CAAZ;AAAA;AADkC,aAAnC,CAFQ;;AAAA;AAEzBC,oBAFyB;;;AAM7BZ,cAAEC,EAAF,CAAKW,QAAL,EAAe,wBAAf;AACApB,eAAGqB,aAAH,CAAiBnB,KAAKoB,OAAL,CAAa,+BAAb,CAAjB,EACEC,KAAKC,SAAL,CAAeJ,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CADF;;AAP6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA","file":"aggregateMetadata.test.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\nconst test = require('blue-tape')\nconst aggregateMetadata = require('../aggregateMetadata')\nconst model = require('../../../vendor/json-api-model')\n\nconst QueueStamp = require('../../../src/extensions/queue')\nconst Moysklad = require('../../../src')\n\ntest('aggregateMetadata is ok', t => {\n  t.ok(aggregateMetadata)\n  t.equals(typeof aggregateMetadata, 'function')\n  t.end()\n})\n\ntest.skip('aggregateMetadata', async t => {\n  let moysklad = Moysklad.compose(QueueStamp).create({ queue: true })\n  let metadata = await aggregateMetadata(moysklad, model, {\n    customEntityFilter: entName => !['Бренды', 'Города'].includes(entName)\n  })\n\n  t.ok(metadata, 'should return metadata')\n  fs.writeFileSync(path.resolve('_temp/aggregatedMetadata.json'),\n    JSON.stringify(metadata, null, 2))\n})\n"]}