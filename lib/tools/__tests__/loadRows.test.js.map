{"version":3,"sources":["../../../src/tools/__tests__/loadRows.test.js"],"names":["test","require","Moysklad","loadRows","ORDER_LARGE_ID","POSITIONS_LARGE_COUNT","ORDER_SMALL_ID","POSITIONS_SMALL_COUNT","uniqCount","Set","items","length","t","equal","end","ms","GET","expand","order","ok","positions","rows","true","Array","equals","map","p","id","LIMIT","limit","OFFSET","offset"],"mappings":"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","file":"loadRows.test.js","sourcesContent":["// TODO Переместить тесты на прямые методы (tools)\n\n'use strict'\n\nconst test = require('blue-tape')\nconst Moysklad = require('../../')\nconst loadRows = require('../loadRows')\n\nconst ORDER_LARGE_ID = 'dd5d3aff-08d6-11e7-7a69-97110015919e'\nconst POSITIONS_LARGE_COUNT = 333\n\nconst ORDER_SMALL_ID = '94510b32-23b3-4167-babf-34463f8a719d'\nconst POSITIONS_SMALL_COUNT = 89\n\nconst uniqCount = items => [...new Set(items)].length\n\ntest('loadRows method', t => {\n  t.equal(typeof loadRows, 'function', 'should be function')\n  t.end()\n})\n\n// TODO Test throws on incorrect arguments?\n\ntest('loadRows returns rows from expanded collection', async t => {\n  const ms = Moysklad()\n\n  let order = await ms.GET(['entity/customerorder', ORDER_SMALL_ID], { expand: 'positions' })\n  t.ok(order.positions.rows, 'positions is expanded')\n\n  let rows = await loadRows(ms, order.positions)\n\n  t.true(rows instanceof Array, 'should return rows array')\n\n  t.equals(rows.length, POSITIONS_SMALL_COUNT,\n    `should return ${POSITIONS_SMALL_COUNT} positions`)\n  t.equal(uniqCount(rows.map(p => p.id)), POSITIONS_SMALL_COUNT,\n    `should return ${POSITIONS_SMALL_COUNT} uniq positions`)\n})\n\ntest('loadRows load and returns rows from not expanded collection', async t => {\n  const ms = Moysklad()\n\n  let order = await ms.GET(['entity/customerorder', ORDER_SMALL_ID])\n  let rows = await loadRows(ms, order.positions)\n\n  t.true(rows instanceof Array, 'should return rows array')\n\n  t.equals(rows.length, POSITIONS_SMALL_COUNT,\n    `should return ${POSITIONS_SMALL_COUNT} positions`)\n  t.equal(uniqCount(rows.map(p => p.id)), POSITIONS_SMALL_COUNT,\n    `should return ${POSITIONS_SMALL_COUNT} uniq positions`)\n})\n\ntest('loadRows load and returns rows from not expanded collection (limit specified)', async t => {\n  const LIMIT = 33\n  const ms = Moysklad()\n\n  let order = await ms.GET(['entity/customerorder', ORDER_SMALL_ID])\n  let rows = await loadRows(ms, order.positions, { limit: LIMIT })\n\n  t.true(rows instanceof Array, 'should return rows array')\n\n  t.equals(rows.length, POSITIONS_SMALL_COUNT,\n    `should return ${POSITIONS_SMALL_COUNT} positions`)\n  t.equal(uniqCount(rows.map(p => p.id)), POSITIONS_SMALL_COUNT,\n    `should return ${POSITIONS_SMALL_COUNT} uniq positions`)\n})\n\ntest('loadRows returns from expanded collection and load others pages', async t => {\n  let ms = Moysklad()\n\n  let order = await ms.GET(['entity/customerorder', ORDER_LARGE_ID], { expand: 'positions' })\n  let rows = await loadRows(ms, order.positions)\n\n  t.true(rows instanceof Array, 'should return rows array')\n\n  t.equals(rows.length, POSITIONS_LARGE_COUNT,\n    `should return ${POSITIONS_LARGE_COUNT} positions`)\n  t.equal(uniqCount(rows.map(p => p.id)), POSITIONS_LARGE_COUNT,\n    `should return ${POSITIONS_LARGE_COUNT} uniq positions`)\n})\n\ntest('loadRows returns from expanded collection and load others pages (with offset) #1',\n  async t => {\n    const LIMIT = 55\n    const OFFSET = 60\n    const ms = Moysklad()\n\n    let order = await ms.GET(['entity/customerorder', ORDER_LARGE_ID], { expand: 'positions' })\n    let rows = await loadRows(ms, order.positions, {\n      offset: OFFSET, limit: LIMIT\n    })\n\n    t.true(rows instanceof Array, 'should return positions array')\n\n    t.equals(rows.length, POSITIONS_LARGE_COUNT - OFFSET,\n      `should return ${POSITIONS_LARGE_COUNT - OFFSET} positions`)\n\n    t.equal(uniqCount(rows.map(p => p.id)), POSITIONS_LARGE_COUNT - OFFSET,\n      `should return ${POSITIONS_LARGE_COUNT - OFFSET} uniq positions`)\n  })\n\ntest('loadRows returns from expanded collection and load others pages (with offset) #2',\n  async t => {\n    const LIMIT = 50\n    const OFFSET = 133\n    const ms = Moysklad()\n\n    let order = await ms.GET(['entity/customerorder', ORDER_LARGE_ID], { expand: 'positions' })\n    let rows = await loadRows(ms, order.positions, {\n      offset: OFFSET, limit: LIMIT\n    })\n\n    t.true(rows instanceof Array, 'should return positions array')\n\n    t.equals(rows.length, POSITIONS_LARGE_COUNT - OFFSET,\n      `should return ${POSITIONS_LARGE_COUNT - OFFSET} positions`)\n\n    t.equal(uniqCount(rows.map(p => p.id)), POSITIONS_LARGE_COUNT - OFFSET,\n      `should return ${POSITIONS_LARGE_COUNT - OFFSET} uniq positions`)\n  })\n\n// TODO проверить результат по заранее полученной эталонной коллекции\n"]}