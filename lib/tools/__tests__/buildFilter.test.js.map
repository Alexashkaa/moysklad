{"version":3,"sources":["../../../src/tools/__tests__/buildFilter.test.js"],"names":["test","require","buildFilter","t","ok","equals","end","query","name","value","moment","Date","some","other","deepEqual","deep","tow","many","$eq","$gt","num","$gte","$lt","$lte","$ne","$exists","$in","notMany","$nin","$and","$not","throws","foo","undefined","Symbol","a"],"mappings":"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","file":"buildFilter.test.js","sourcesContent":["'use strict'\n\nconst test = require('blue-tape')\nconst buildFilter = require('../buildFilter')\n\ntest('buildFilter', t => {\n  t.ok(buildFilter)\n  t.equals(typeof buildFilter, 'function', 'should to be function')\n  t.end()\n})\n\ntest('buildFilter with simple filter', t => {\n  let query = {\n    name: 'foo',\n    value: 3,\n    moment: new Date('2017-01-09T19:15:06.556Z'),\n    some: null,\n    other: true\n  }\n\n  t.deepEqual(buildFilter(query),\n    'moment=2017-01-09 22:15:06;name=foo;other=true;some=;value=3')\n\n  t.end()\n})\n\ntest('buildFilter with simple deep and many condition filter', t => {\n  let query = {\n    name: 'foo',\n    value: 0,\n    moment: new Date('2017-01-09T19:15:06.556Z'),\n    'deep.one': 5,\n    deep: {\n      tow: false\n    },\n    many: [1, 'baz']\n  }\n\n  t.deepEqual(buildFilter(query),\n    'deep.one=5;deep.tow=false;many=1;many=baz;moment=2017-01-09 22:15:06;name=foo;value=0')\n\n  t.end()\n})\n\ntest('buildFilter with mogo query comparison selectors', t => {\n  let query = {\n    name: {\n      $eq: 'foo'\n    },\n    value: {\n      $gt: 5\n    },\n    num: {\n      $gte: 5, $lt: 10\n    },\n    moment: {\n      $lte: new Date('2017-01-09T19:15:06.556Z')\n    },\n    deep: {\n      tow: {\n        $ne: 'bar'\n      }\n    },\n    many: {\n      $exists: true,\n      $in: [1, 'baz']\n    },\n    notMany: {\n      $nin: [3, 6],\n      $gt: 0\n    }\n  }\n\n  t.deepEqual(buildFilter(query),\n    'deep.tow!=bar;many!=;many=1;many=baz;moment>=2017-01-09 22:15:06;name=foo;notMany!=3;' +\n    'notMany!=6;notMany>0;num<10;num>=5;value>5')\n\n  t.end()\n})\n\ntest('buildFilter with mogo query logical selectors', t => {\n  let query = {\n    name: {\n      $and: [\n        { $eq: 'foo' },\n        { $eq: 'bar' }\n      ]\n    },\n    value: {\n      $not: {\n        $eq: 10,\n        $in: [5, 6]\n      }\n    }\n  }\n\n  t.deepEqual(buildFilter(query),\n    'name=bar;name=foo;value!=10;value!=5;value!=6;value=')\n\n  t.end()\n})\n\ntest('buildFilter errors', t => {\n  t.throws(() => {\n    buildFilter()\n  }, 'filter must to be an object')\n\n  t.throws(() => {\n    buildFilter({ foo: undefined })\n  }, 'filter \"foo\" key value is undefined')\n\n  t.throws(() => {\n    buildFilter({ foo: Symbol('foo') })\n  }, 'filter \"foo\" key value is incorrect')\n\n  t.throws(() => {\n    buildFilter({ foo: { $eq: { a: 1 } } })\n  }, '$eq: value must to be string, number, date or null')\n\n  t.throws(() => {\n    buildFilter({ foo: { $in: { a: 1 } } })\n  }, '$in: selector value must to be an array')\n\n  t.throws(() => {\n    buildFilter({ foo: { $and: { a: 1 } } })\n  }, '$and: selector value must to be an array')\n\n  t.throws(() => {\n    buildFilter({ foo: { $not: 3 } })\n  }, '$not: selector value must to be an object')\n\n  t.throws(() => {\n    buildFilter({ foo: { $exists: 'boo' } })\n  }, '$exists: elector value must to be boolean')\n\n  t.end()\n})\n\n// debugger\n"]}