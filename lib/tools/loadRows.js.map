{"version":3,"sources":["../../src/tools/loadRows.js"],"names":["have","require","module","exports","client","collection","query","argumentsObject","meta","size","limit","offset","href","parseUri","rowsPages","rows","length","slice","Error","push","GET","path","Object","assign","then","col","Promise","all","res","concat","cobinedRows","reduce","loadRows"],"mappings":"AAAA;;;;AAEA,IAAMA,OAAOC,QAAQ,SAAR,CAAb;;AAEAC,OAAOC,OAAP;AAAA,uDAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAC0BH,YAAgB,CACvD,EAAEI,QAAQ,QAAV,EAAoBC,YAAY,qBAAhC,EAAuDC,OAAO,SAA9D,EADuD,EAEvDN,KAAKO,eAFkD,CAAhB,CAD1B,EACTH,MADS,SACTA,MADS,EACDC,UADC,SACDA,UADC,sBACWC,KADX,EACWA,KADX,+BACmB,EADnB;AAAA,+BAMeD,WAAWG,IAN1B,EAMTC,IANS,oBAMTA,IANS,EAMHC,KANG,oBAMHA,KANG,EAMIC,MANJ,oBAMIA,MANJ;AAOXC,gBAPW,GAOJR,OAAOS,QAAP,CAAgBR,WAAWG,IAAX,CAAgBI,IAAhC,CAPI;AAQXE,qBARW,GAQC,EARD;;AAAA,kBAUXT,WAAWU,IAAX,IAAmBV,WAAWU,IAAX,CAAgBC,MAVxB;AAAA;AAAA;AAAA;;AAAA,kBAWTP,QAAQC,KAXC;AAAA;AAAA;AAAA;;AAAA,6CAYJJ,MAAMK,MAAN,GAAeN,WAAWU,IAAX,CAAgBE,KAAhB,CAAsBX,MAAMK,MAA5B,CAAf,GAAqDN,WAAWU,IAZ5D;;AAAA;;AAeb,gBAAIT,MAAMK,MAAN,IAAgBD,KAApB,EAA2B;AACzBC,uBAASL,MAAMK,MAAf;AACD,aAFD,MAEO;AACLG,0BAAY,CAACR,MAAMK,MAAN,IAAgB,IAAhB,GACTN,WAAWU,IAAX,CAAgBE,KAAhB,CAAsBX,MAAMK,MAA5B,CADS,GAETN,WAAWU,IAFH,CAAZ;AAGAJ,uBAASD,KAAT;AACD;;AAtBY;AAAA,kBAyBXJ,MAAMI,KAAN,IAAe,IAzBJ;AAAA;AAAA;AAAA;;AAAA,kBA0BTJ,MAAMI,KAAN,IAAe,CA1BN;AAAA;AAAA;AAAA;;AAAA,kBA0Be,IAAIQ,KAAJ,CAAU,sCAAV,CA1Bf;;AAAA;AA2BbR,oBAAQJ,MAAMI,KAAd;;AA3Ba;;AA8Bf,mBAAOD,OAAOE,MAAd,EAAsB;AACpBG,wBAAUK,IAAV,CACEf,OAAOgB,GAAP,CAAWR,KAAKS,IAAhB,EAAsBC,OAAOC,MAAP,CAAc,EAAd,EAAkBX,KAAKN,KAAvB,EAA8BA,KAA9B,EAAqC,EAAEK,cAAF,EAAUD,YAAV,EAArC,CAAtB,EACGc,IADH,CACQ;AAAA,uBAAOC,IAAIV,IAAX;AAAA,eADR,CADF;AAGAJ,wBAAUD,KAAV;AACD;;AAnCc;AAAA,mBAqCUgB,QAAQC,GAAR,CAAYb,SAAZ,CArCV;;AAAA;AAAA,0BA0CL,UAACc,GAAD,EAAMb,IAAN;AAAA,qBAAea,IAAIC,MAAJ,CAAWd,IAAX,CAAf;AAAA,aA1CK;;AAAA,0BA0C4B,EA1C5B;AAqCXe,uBArCW;AAsCb;AACA;AACA;AACA;AACCC,kBA1CY;AAAA,6CA4CRD,WA5CQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA,WAAgCE,QAAhC;AAAA;AAAA;;AAAA,SAAgCA,QAAhC;AAAA","file":"loadRows.js","sourcesContent":["'use strict'\n\nconst have = require('../have')\n\nmodule.exports = async function loadRows () {\n  let { client, collection, query = {} } = have(arguments, [\n    { client: 'Object', collection: 'Moysklad.Collection', query: 'opt obj' },\n    have.argumentsObject\n  ])\n\n  let { size, limit, offset } = collection.meta\n  let href = client.parseUri(collection.meta.href)\n  let rowsPages = []\n\n  if (collection.rows && collection.rows.length) {\n    if (size <= limit) {\n      return query.offset ? collection.rows.slice(query.offset) : collection.rows\n    }\n\n    if (query.offset >= limit) {\n      offset = query.offset\n    } else {\n      rowsPages = [query.offset != null\n        ? collection.rows.slice(query.offset)\n        : collection.rows]\n      offset = limit\n    }\n  }\n\n  if (query.limit != null) {\n    if (query.limit <= 0) throw new Error('query.limit should be greater then 0')\n    limit = query.limit\n  }\n\n  while (size > offset) {\n    rowsPages.push(\n      client.GET(href.path, Object.assign({}, href.query, query, { offset, limit }))\n        .then(col => col.rows))\n    offset += limit\n  }\n\n  let cobinedRows = (await Promise.all(rowsPages))\n    // TODO Remove Debug\n    // .map(pos => {\n    //   return pos\n    // })\n    .reduce((res, rows) => res.concat(rows), [])\n\n  return cobinedRows\n}\n"]}