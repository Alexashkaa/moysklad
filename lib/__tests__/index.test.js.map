{"version":3,"sources":["../../src/__tests__/index.test.js"],"names":["test","require","Moysklad","t","ok","end","equals","getTimeString","ms","getOptions","getAuthHeader","fetchUri","buildUri","parseUri","GET","POST","PUT","DELETE","options","login","password","msOptions","true","a","b","c","d","filter","name","value","$eq","endpoint","api","apiVersion","common","deepEqual","Object","assign","path","query","undefined","counterparties","limit","rows","Array","Promise","all","context","employee","meta","href","group","code","Date","now","product","attributes","id","newProduct","shouldFail"],"mappings":"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","file":"index.test.js","sourcesContent":["'use strict'\n\nconst test = require('blue-tape')\nconst Moysklad = require('..')\n\ntest('Moysklad constructor', t => {\n  t.ok(Moysklad)\n  t.end()\n})\n\ntest('Moysklad static methods', t => {\n  t.equals(typeof Moysklad.getTimeString, 'function')\n  t.end()\n})\n\ntest('Moysklad instance methods', t => {\n  let ms = Moysklad()\n  t.ok(ms)\n  t.equals(typeof ms.getOptions, 'function')\n  t.equals(typeof ms.getAuthHeader, 'function')\n  t.equals(typeof ms.fetchUri, 'function')\n  t.equals(typeof ms.buildUri, 'function')\n  t.equals(typeof ms.parseUri, 'function')\n  t.equals(typeof ms.GET, 'function')\n  t.equals(typeof ms.POST, 'function')\n  t.equals(typeof ms.PUT, 'function')\n  t.equals(typeof ms.DELETE, 'function')\n  t.end()\n})\n\ntest('Create Moysklad instance with options', t => {\n  let options = {\n    login: 'login',\n    password: 'password'\n  }\n\n  let ms = Moysklad(options)\n  t.ok(ms)\n\n  let msOptions = ms.getOptions()\n  t.true(msOptions !== options)\n  t.equals(msOptions.login, 'login')\n  t.equals(msOptions.password, 'password')\n\n  t.end()\n})\n\ntest('Moysklad#buildUri method', t => {\n  let ms = Moysklad()\n\n  t.equals(ms.buildUri(['/path/', 'To//My', 'Res/']),\n    'https://online.moysklad.ru/api/remap/1.1/path/to/my/res')\n\n  t.equals(ms.buildUri(['path', 'to', 'res'], {\n    a: 1,\n    b: 'tow',\n    c: true,\n    d: [1, '2']\n  }), 'https://online.moysklad.ru/api/remap/1.1/path/to/res?a=1&b=tow&c=true&d=1&d=2')\n\n  t.equals(ms.buildUri(['path', 'to', 'res'], {\n    a: 1,\n    filter: { name: 'foo', value: { $eq: 'bar' } }\n  }), 'https://online.moysklad.ru/api/remap/1.1/path/to/res?a=1&filter=name%3Dfoo%3Bvalue%3Dbar')\n\n  t.end()\n})\n\ntest('Moysklad#parseUri method', t => {\n  let ms = Moysklad()\n  let { endpoint, api, apiVersion } = ms.getOptions()\n\n  let common = { endpoint, api, apiVersion }\n\n  t.deepEqual(ms.parseUri('https://online.moysklad.ru/api/remap/1.1/path/to/my/res'),\n    Object.assign({}, common, {\n      path: ['path', 'to', 'my', 'res'],\n      query: undefined\n    }))\n\n  t.deepEqual(ms.parseUri('https://online.moysklad.ru/api/remap/1.1/path/to/my/res?a=1&b=2&' +\n    'a=one&c=&foo.bar=baz&filter=name%3Dfoo%3Bvalue%3Dbar'),\n    Object.assign({}, common, {\n      path: ['path', 'to', 'my', 'res'],\n      query: {\n        a: [1, 'one'],\n        b: 2,\n        c: null,\n        'foo.bar': 'baz',\n        filter: 'name=foo;value=bar'\n        // TODO Filter parsing\n        // filter: {\n        //   name: 'foo',\n        //   value: 'bar'\n        // }\n      }\n    }))\n\n  t.end()\n})\n\ntest('Moysklad#GET method', async t => {\n  let ms = Moysklad()\n\n  let counterparties = await ms.GET('entity/counterparty', { limit: 1 })\n  t.equals(typeof counterparties, 'object', 'should return object')\n  t.ok(counterparties.rows instanceof Array, 'should return counterparties collection')\n\n  let [employee, group] = await Promise.all([\n    ms.fetchUri(counterparties.context.employee.meta.href),\n    ms.fetchUri(counterparties.rows[0].group.meta.href)\n  ])\n\n  t.equals(typeof employee, 'object',\n    'Moysklad#fetchUri method should fetch employee object by href')\n\n  t.equals(typeof group, 'object',\n    'Moysklad#fetchUri method should fetch group object by href')\n})\n\ntest('Moysklad#POST/PUT/DELETE', async t => {\n  let ms = Moysklad()\n\n  let code = 'test-' + Date.now()\n  let product = {\n    name: 'TEST-' + Date.now(),\n    code,\n    attributes: [\n      {\n        id: '0008b3f4-1897-11e3-d76c-7054d21a8d1e',\n        name: 'Вид товара',\n        value: {\n          name: 'Рюкзак'\n        }\n      },\n      {\n        id: 'f4c073c5-1bcc-4d91-8b41-ed825495b677',\n        name: 'Бренд',\n        value: {\n          name: 'No Brand'\n        }\n      },\n      {\n        id: '71f17086-1a7f-47f1-b447-59b71351bfad',\n        name: 'Сезон',\n        value: {\n          name: '02 Осень/Зима'\n        }\n      },\n      {\n        id: 'b4bee095-4278-4147-95e0-0328c9207be0',\n        name: 'Вид номенклатуры',\n        value: {\n          name: 'Товары в обороте'\n        }\n      }\n    ]\n  }\n\n  let newProduct = await ms.POST('entity/product', product)\n\n  t.ok(newProduct, 'POST should create new entity')\n  t.equals(newProduct.name, product.name, 'new entity name should equals')\n  t.equals(newProduct.code, code, 'new entity name should have some property')\n\n  code = 'test-' + Date.now()\n  newProduct = await ms.PUT(['entity/product', newProduct.id], { code })\n\n  t.ok(newProduct, 'PUT should update entity')\n  t.equals(newProduct.code, code, 'updated entity field should be equal')\n\n  await ms.DELETE(['entity/product', newProduct.id])\n\n  await t.shouldFail((() => ms.GET(['entity/product', newProduct.id]))(), /не найден/i)\n})\n\n"]}