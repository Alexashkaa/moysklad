{"version":3,"sources":["../../src/__tests__/index.test.js"],"names":["test","require","Moysklad","t","ok","end","equals","getTimeString","ms","getOptions","getAuthHeader","fetchUri","buildUri","parseUri","GET","POST","PUT","DELETE","options","login","password","msOptions","true","a","b","c","d","filter","name","value","$eq","endpoint","api","apiVersion","common","deepEqual","Object","assign","path","query","undefined","limit","counterparties","rows","Array","Promise","all","context","employee","meta","href","group","code","Date","now","product","attributes","id","newProduct","shouldFail"],"mappings":"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","file":"index.test.js","sourcesContent":["'use strict'\n\nconst test = require('blue-tape')\nconst Moysklad = require('..')\n// const sleep = require('../tools/sleep')\n\n// const PRODUCT_ID = '8dff01c6-e06d-413c-a38f-6139eaf4c2c7'\n// const PRODUCT_NAME = 'Тест 9999+'\n\n// const PRODUCT_ID_LIST = [\n//   '1a675fb4-5df2-11e5-90a2-8ecb0008e7d8',\n//   '1a660c84-5df2-11e5-90a2-8ecb0008e7be',\n//   '1a5f4f7f-5df2-11e5-90a2-8ecb0008e749',\n//   '1a607140-5df2-11e5-90a2-8ecb0008e756',\n//   '1a612644-5df2-11e5-90a2-8ecb0008e763',\n//   '1a61e09e-5df2-11e5-90a2-8ecb0008e770',\n//   '1a628f5a-5df2-11e5-90a2-8ecb0008e77d',\n//   '1a634466-5df2-11e5-90a2-8ecb0008e78a',\n//   '1a63f958-5df2-11e5-90a2-8ecb0008e797',\n//   '1a64b216-5df2-11e5-90a2-8ecb0008e7a4'\n// ]\n\ntest('Moysklad constructor', t => {\n  t.ok(Moysklad)\n  t.end()\n})\n\ntest('Moysklad static methods', t => {\n  t.equals(typeof Moysklad.getTimeString, 'function')\n  t.end()\n})\n\ntest('Moysklad instance methods', t => {\n  let ms = Moysklad()\n  t.ok(ms)\n  t.equals(typeof ms.getOptions, 'function')\n  t.equals(typeof ms.getAuthHeader, 'function')\n  t.equals(typeof ms.fetchUri, 'function')\n  t.equals(typeof ms.buildUri, 'function')\n  t.equals(typeof ms.parseUri, 'function')\n  t.equals(typeof ms.GET, 'function')\n  t.equals(typeof ms.POST, 'function')\n  t.equals(typeof ms.PUT, 'function')\n  t.equals(typeof ms.DELETE, 'function')\n  t.end()\n})\n\ntest('Create Moysklad instance with options', t => {\n  let options = {\n    login: 'login',\n    password: 'password'\n  }\n\n  let ms = Moysklad(options)\n  let msOptions = ms.getOptions()\n\n  t.true(msOptions !== options)\n  t.equals(msOptions.login, 'login')\n  t.equals(msOptions.password, 'password')\n\n  t.end()\n})\n\ntest('Create Moysklad instance methods', t => {\n  let ms = Moysklad({\n    login: 'login',\n    password: 'password'\n  })\n  t.ok(ms)\n  t.end()\n})\n\ntest('Moysklad#buildUri method', t => {\n  let ms = Moysklad()\n\n  t.equals(ms.buildUri(['/path/', 'To//My', 'Res/']),\n    'https://online.moysklad.ru/api/remap/1.1/path/to/my/res')\n\n  t.equals(ms.buildUri(['path', 'to', 'res'], {\n    a: 1,\n    b: 'tow',\n    c: true,\n    d: [1, '2']\n  }), 'https://online.moysklad.ru/api/remap/1.1/path/to/res?a=1&b=tow&c=true&d=1&d=2')\n\n  t.equals(ms.buildUri(['path', 'to', 'res'], {\n    a: 1,\n    filter: { name: 'foo', value: { $eq: 'bar' } }\n  }), 'https://online.moysklad.ru/api/remap/1.1/path/to/res?a=1&filter=name%3Dfoo%3Bvalue%3Dbar')\n\n  t.end()\n})\n\ntest('Moysklad#parseUri method', t => {\n  let ms = Moysklad()\n  let { endpoint, api, apiVersion } = ms.getOptions()\n\n  let common = { endpoint, api, apiVersion }\n\n  t.deepEqual(ms.parseUri('https://online.moysklad.ru/api/remap/1.1/path/to/my/res'),\n    Object.assign({}, common, {\n      path: ['path', 'to', 'my', 'res'],\n      query: undefined\n    }))\n\n  // TODO Query\n  t.deepEqual(ms.parseUri('https://online.moysklad.ru/api/remap/1.1/path/to/my/res?a=1&b=2&' +\n    'a=one&c=&foo.bar=baz&filter=name%3Dfoo%3Bvalue%3Dbar'),\n    Object.assign({}, common, {\n      path: ['path', 'to', 'my', 'res'],\n      query: {\n        a: [1, 'one'],\n        b: 2,\n        c: null,\n        'foo.bar': 'baz',\n        filter: {\n          name: 'foo',\n          value: 'bar'\n        }\n      }\n    }))\n\n  t.end()\n})\n\ntest('Moysklad#GET method', async t => {\n  let ms = Moysklad()\n\n  let counterparties = await ms.GET('entity/counterparty', { limit: 1 })\n  t.equals(typeof counterparties, 'object', 'should return object')\n  t.ok(counterparties.rows instanceof Array, 'should return counterparties collection')\n\n  let [employee, group] = await Promise.all([\n    ms.fetchUri(counterparties.context.employee.meta.href),\n    ms.fetchUri(counterparties.rows[0].group.meta.href)\n  ])\n\n  t.equals(typeof employee, 'object',\n    'Moysklad#fetchUri method should fetch employee object by href')\n\n  t.equals(typeof group, 'object',\n    'Moysklad#fetchUri method should fetch group object by href')\n})\n\ntest('Moysklad#POST/PUT/DELETE', async t => {\n  let ms = Moysklad()\n\n  let code = 'test-' + Date.now()\n  let product = {\n    name: 'TEST-' + Date.now(),\n    code,\n    attributes: [\n      {\n        id: '0008b3f4-1897-11e3-d76c-7054d21a8d1e',\n        name: 'Вид товара',\n        value: {\n          name: 'Рюкзак'\n        }\n      },\n      {\n        id: 'f4c073c5-1bcc-4d91-8b41-ed825495b677',\n        name: 'Бренд',\n        value: {\n          name: 'No Brand'\n        }\n      },\n      {\n        id: '71f17086-1a7f-47f1-b447-59b71351bfad',\n        name: 'Сезон',\n        value: {\n          name: '02 Осень/Зима'\n        }\n      },\n      {\n        id: 'b4bee095-4278-4147-95e0-0328c9207be0',\n        name: 'Вид номенклатуры',\n        value: {\n          name: 'Товары в обороте'\n        }\n      }\n    ]\n  }\n\n  let newProduct = await ms.POST('entity/product', product)\n\n  t.ok(newProduct, 'POST should create new entity')\n  t.equals(newProduct.name, product.name, 'new entity name should equals')\n  t.equals(newProduct.code, code, 'new entity name should have some property')\n\n  code = 'test-' + Date.now()\n  newProduct = await ms.PUT(['entity/product', newProduct.id], { code })\n\n  t.ok(newProduct, 'PUT should update entity')\n  t.equals(newProduct.code, code, 'updated entity field should be equal')\n\n  await ms.DELETE(['entity/product', newProduct.id])\n\n  await t.shouldFail((() => ms.GET(['entity/product', newProduct.id]))(), /не найден/i)\n})\n\n"]}