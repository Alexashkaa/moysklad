{"version":3,"sources":["../../../src/extensions/queue/queue.js"],"names":["have","require","sleep","Action","id","task","cb","action","then","result","catch","err","Queue","options","strict","constraintPeriod","tasksPerPeriod","parallelTaskCount","_lastTaskId","_timeline","_tasksInProgress","_actionsQueue","DEBUG","debug","length","Error","taskResult","Promise","resolve","reject","push","processTask","curTime","Date","now","shift","JSON","stringify","waitTime","curAction","data","module","exports"],"mappings":"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","file":"queue.js","sourcesContent":["'use strict'\n\n/* eslint brace-style:0 */\n/* global DEBUG, debug */\n\nconst have = require('../../have')\nconst sleep = require('../../tools/sleep')\n\nclass Action {\n  /**\n   * Создание Action\n   * @param {number} id Идентификатор\n   * @param {function(): Promise<any>} task Задача\n   * @param {function} cb callback\n   */\n  constructor (id, task, cb) {\n    this.id = id\n    this.action = cb => task()\n      .then(result => cb(null, result))\n      .catch(err => cb(err))\n    this.cb = cb\n  }\n}\n\nclass Queue {\n  /**\n   * Создание Queue\n   * @param {object} options Параметры очереди\n   */\n  constructor (options = {}) {\n    have.strict(options, {\n      constraintPeriod: 'opt num',\n      tasksPerPeriod: 'opt num',\n      parallelTaskCount: 'opt num'\n    })\n\n    let {\n      constraintPeriod = 1000, tasksPerPeriod = 5, parallelTaskCount = 2\n    } = options\n\n    /** @type {number} Период на который накладывается ограничение по кол-ву задач (мс) */\n    this.constraintPeriod = constraintPeriod\n\n    /** @type {number} Кол-во задач допустимых за период */\n    this.tasksPerPeriod = tasksPerPeriod\n\n    /** @type {number} Макс. допустимое кол-во параллельно выполняемых задач */\n    this.parallelTaskCount = parallelTaskCount\n\n    /** @type {number} Последний id задачи */\n    this._lastTaskId = 0\n\n    /** @type {Array<number>} Моменты времени завершения прошлых задач */\n    this._timeline = []\n\n    /** @type {number} Кол-во задач ожидающих выполнения */\n    this._tasksInProgress = 0\n\n    /** @type {Array<Action>} Очередь задач */\n    this._actionsQueue = []\n  }\n\n  /**\n   * Выполняет задачу в рамках очереди\n   * @param {function(): Promise<any>} task task to be wrapped\n   * @returns {Promise<any>} Результат задачи\n   */\n  processTask (task) {\n    if (typeof DEBUG !== 'undefined') {\n      debug(`processTask#${task ? '(task)' : '()'}: tasksInProgress - ${this._tasksInProgress} | ` +\n        `actionsQueue - ${this._actionsQueue.length}`)\n    }\n\n    if (task) {\n      if (typeof task !== 'function') {\n        throw new Error('processTask: `task` argument must to be function')\n      }\n      let taskResult = new Promise((resolve, reject) => {\n        this._actionsQueue.push(\n          new Action(++this._lastTaskId, task, (err, result) =>\n            err ? reject(err) : resolve(result)))\n      })\n      this.processTask()\n      return taskResult\n    }\n\n    if (this._tasksInProgress < this.parallelTaskCount && this._actionsQueue.length > 0) {\n      let curTime = Date.now()\n\n      while (this._timeline.length) {\n        // -r1-r2-[-r3--r4-r5----------*]\n        if (curTime - this._timeline[0] > this.constraintPeriod) {\n          this._timeline.shift()\n        }\n        // -------[-r3--r4-r5----------*]\n        else {\n          break\n        }\n      }\n\n      if (typeof DEBUG !== 'undefined') {\n        debug(`timeline - ${JSON.stringify(this._timeline)}`)\n      }\n\n      // ----[r1-r2---r3--r4-r5--*--]\n      if (this._timeline.length >= this.tasksPerPeriod) {\n        let waitTime = this.constraintPeriod - (curTime - this._timeline[0])\n        if (typeof DEBUG !== 'undefined') {\n          debug(`tasksInProgress - ${this._tasksInProgress} | waitTime ${waitTime}`)\n        }\n        sleep(waitTime).then(() => {\n          if (typeof DEBUG !== 'undefined') {\n            debug(`call processTask after waitTime - ${waitTime}`)\n          }\n          this.processTask()\n        })\n        return\n      }\n      // else\n      // ----[r1-r2---r3---------*--]\n\n      let curAction = this._actionsQueue.shift()\n      this._tasksInProgress++\n      this._timeline.push(Date.now())\n      if (typeof DEBUG !== 'undefined') {\n        debug(`Start action#${curAction.id} | tasksInProgress - ${this._tasksInProgress} | ` +\n          `timeline - ${JSON.stringify(this._timeline)} | ` +\n          `actionsQueue - ${this._actionsQueue.length}`)\n      }\n      curAction.action((err, data) => {\n        this._tasksInProgress--\n        if (typeof DEBUG !== 'undefined') {\n          debug(`Fnish action#${data} | tasksInProgress - ${this._tasksInProgress} | ` +\n            `timeline - ${JSON.stringify(this._timeline)} | ` +\n            `actionsQueue - ${this._actionsQueue.length}`)\n        }\n        // this._timeline.push(Date.now())\n        this.processTask()\n        curAction.cb(err, data)\n      })\n    } else {\n      this._tasksInProgress < this.parallelTaskCount\n      if (typeof DEBUG !== 'undefined') {\n        debug(`Skip processTask: tasksInProgress - ${this._tasksInProgress} | ` +\n        `timeline - ${JSON.stringify(this._timeline)} | ` +\n        `actionsQueue - ${this._actionsQueue.length}`)\n      }\n    }\n  }\n}\n\nmodule.exports = Queue\n"]}