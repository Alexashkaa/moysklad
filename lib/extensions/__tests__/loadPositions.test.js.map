{"version":3,"sources":["../../../src/extensions/__tests__/loadPositions.test.js"],"names":["test","require","Moysklad","loadPositions","ORDER_ID","POSITIONS_COUNT","OFFSET","LIMIT","uniqCount","Set","items","length","ExtendedMoysklad","compose","ms","t","ok","end","limit","positions","true","Array","equals","equal","map","p","id","offset"],"mappings":"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","file":"loadPositions.test.js","sourcesContent":["// TODO Переместить тесты на прямые методы (tools)\n\n'use strict'\n\nconst test = require('blue-tape')\nconst Moysklad = require('../../')\nconst loadPositions = require('../loadPositions')\n\nconst ORDER_ID = '94510b32-23b3-4167-babf-34463f8a719d'\nconst POSITIONS_COUNT = 89\nconst OFFSET = 29\nconst LIMIT = 20\n\nconst uniqCount = items => [...new Set(items)].length\n\nlet ExtendedMoysklad = Moysklad.compose(loadPositions)\n\ntest('Moysklad#loadPositions method (extension)', t => {\n  let ms = ExtendedMoysklad()\n  t.ok(ms.loadPositions, 'should add `loadPositions` method')\n  t.end()\n})\n\ntest('Moysklad#loadPositions method extension (one request)', async t => {\n  let ms = ExtendedMoysklad()\n\n  t.ok(ms.loadPositions, 'should add `loadPositions` method')\n\n  let positions = await ms.loadPositions('customerorder', ORDER_ID, { limit: 100 })\n\n  t.true(positions instanceof Array, 'should return positions array')\n\n  t.equals(positions.length, POSITIONS_COUNT,\n    `should return ${POSITIONS_COUNT} positions`)\n\n  t.equal(uniqCount(positions.map(p => p.id)), POSITIONS_COUNT,\n    `should return ${POSITIONS_COUNT} uniq positions`)\n})\n\ntest('Moysklad#loadPositions (several requests)', async t => {\n  let ms = ExtendedMoysklad()\n\n  let positions = await ms.loadPositions('customerorder', ORDER_ID, { limit: LIMIT })\n\n  t.true(positions instanceof Array, 'should return positions array')\n\n  t.equals(positions.length, POSITIONS_COUNT,\n    `should return ${POSITIONS_COUNT} positions`)\n\n  t.equal(uniqCount(positions.map(p => p.id)), POSITIONS_COUNT,\n    `should return ${POSITIONS_COUNT} uniq positions`)\n})\n\ntest('Moysklad#loadPositions (several requests with start offset)', async t => {\n  let ms = ExtendedMoysklad()\n  let positions = await ms.loadPositions('customerorder', ORDER_ID, {\n    offset: OFFSET, limit: LIMIT\n  })\n\n  t.true(positions instanceof Array, 'should return positions array')\n\n  t.equals(positions.length, POSITIONS_COUNT - OFFSET,\n    `should return ${POSITIONS_COUNT - OFFSET} positions`)\n\n  t.equal(uniqCount(positions.map(p => p.id)), POSITIONS_COUNT - OFFSET,\n    `should return ${POSITIONS_COUNT - OFFSET} uniq positions`)\n})\n"]}