{"version":3,"sources":["../../src/methods/parseUri.js"],"names":["have","require","normalizeUrl","parseQueryString","PATH_QUERY_REGEX","module","exports","parseUri","uri","strict","arguments","getOptions","endpoint","api","apiVersion","baseUri","join","indexOf","Error","tail","substring","length","exec","pathStr","queryStr","path","split","query"],"mappings":";AAAA;;;;AAEA,MAAMA,OAAOC,QAAQ,SAAR,CAAb;AACA,MAAMC,eAAeD,QAAQ,uBAAR,CAArB;AACA,MAAME,mBAAmBF,QAAQ,2BAAR,CAAzB;;AAEA,MAAMG,mBAAmB,qBAAzB;;AAEAC,OAAOC,OAAP,GAAiB,SAASC,QAAT,CAAmBC,GAAnB,EAAwB;AACvCR,OAAKS,MAAL,CAAYC,SAAZ,EAAuB,EAAEF,KAAK,KAAP,EAAvB;;AADuC,oBAGH,KAAKG,UAAL,EAHG;;AAAA,MAGjCC,QAHiC,eAGjCA,QAHiC;AAAA,MAGvBC,GAHuB,eAGvBA,GAHuB;AAAA,MAGlBC,UAHkB,eAGlBA,UAHkB;;;AAKvC,MAAIC,UAAUb,aAAa,CAACU,QAAD,EAAWC,GAAX,EAAgBC,UAAhB,EAA4BE,IAA5B,CAAiC,GAAjC,CAAb,CAAd;AACA,MAAIR,IAAIS,OAAJ,CAAYF,OAAZ,MAAyB,CAA7B,EAAgC;AAC9B,UAAM,IAAIG,KAAJ,CAAU,gEAAV,CAAN;AACD;;AAED,MAAIC,OAAOX,IAAIY,SAAJ,CAAcL,QAAQM,MAAR,GAAiB,CAA/B,CAAX;;AAVuC,8BAYXjB,iBAAiBkB,IAAjB,CAAsBH,IAAtB,CAZW;AAAA;;AAAA,MAYhCI,OAZgC;AAAA,MAYvBC,QAZuB;;;AAcvC,MAAI,CAACD,OAAL,EAAc;AACZ,UAAM,IAAIL,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,MAAIO,OAAOvB,aAAaqB,OAAb,EAAsBG,KAAtB,CAA4B,KAA5B,CAAX;AACA,MAAIC,QAAQxB,iBAAiBqB,QAAjB,CAAZ;;AAEA;;AAEA,SAAO,EAAEZ,kBAAF,EAAYC,QAAZ,EAAiBC,sBAAjB,EAA6BW,UAA7B,EAAmCE,YAAnC,EAAP;AACD,CAxBD","file":"parseUri.js","sourcesContent":["'use srict'\n\nconst have = require('../have')\nconst normalizeUrl = require('../tools/normalizeUrl')\nconst parseQueryString = require('../tools/parseQueryString')\n\nconst PATH_QUERY_REGEX = /([^?]+)(?:\\?(.+))?$/\n\nmodule.exports = function parseUri (uri) {\n  have.strict(arguments, { uri: 'str' })\n\n  let { endpoint, api, apiVersion } = this.getOptions()\n\n  let baseUri = normalizeUrl([endpoint, api, apiVersion].join('/'))\n  if (uri.indexOf(baseUri) !== 0) {\n    throw new Error('Uri does not match client settings (endpoint, api, apiVersion)')\n  }\n\n  let tail = uri.substring(baseUri.length + 1)\n\n  let [, pathStr, queryStr] = PATH_QUERY_REGEX.exec(tail)\n\n  if (!pathStr) {\n    throw new Error('Empty uri path')\n  }\n\n  let path = normalizeUrl(pathStr).split(/\\//g)\n  let query = parseQueryString(queryStr)\n\n  // TODO Parse query.filter\n\n  return { endpoint, api, apiVersion, path, query }\n}\n"]}