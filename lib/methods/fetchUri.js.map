{"version":3,"sources":["../../src/methods/fetchUri.js"],"names":["have","require","getResponseError","errorsHttp","module","exports","uri","options","strict","arguments","emit","emitter","bind","fetchOptions","method","headers","credentials","authHeader","getAuthHeader","Authorization","body","response","fetch","contentType","responseJson","error","has","get","indexOf","json","ok","status","toString","Error","statusText","fetchUri"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAOC,QAAQ,SAAR,CAAb;AACA,MAAMC,mBAAmBD,QAAQ,qBAAR,CAAzB;AACA,MAAME,aAAaF,QAAQ,eAAR,CAAnB;;AAEAG,OAAOC,OAAP;AAAA,+BAAiB,WAAyBC,GAAzB,EAA4C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC3DP,SAAKQ,MAAL,CAAYC,SAAZ,EAAuB,EAAEH,KAAK,KAAP,EAAcC,SAAS,YAAvB,EAAvB;;AAEA,QAAIG,OAAO,KAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaD,IAAb,CAAkBE,IAAlB,CAAuB,KAAKD,OAA5B,CAAf,GAAsD,IAAjE;AACA,QAAIE,eAAe;AACjBC,cAAQP,QAAQO,MAAR,IAAkB,KADT;AAEjBC,eAAS;AACP,wBAAgB;AADT,OAFQ;AAKjBC,mBAAa;AALI,KAAnB;;AAQA,QAAIC,aAAa,KAAKC,aAAL,EAAjB;AACA,QAAID,UAAJ,EAAgB;AACdJ,mBAAaE,OAAb,CAAqBI,aAArB,GAAqC,KAAKD,aAAL,EAArC;AACD;;AAED,QAAIX,QAAQa,IAAR,IAAgB,IAAhB,IAAwBb,QAAQO,MAAhC,IAA0CP,QAAQO,MAAR,KAAmB,KAAjE,EAAwE;AACtED,mBAAaO,IAAb,GAAoBb,QAAQa,IAA5B;AACD;;AAED,QAAIV,IAAJ,EAAUA,KAAK,eAAL,EAAsB,EAAEJ,QAAF,EAAOC,SAASM,YAAhB,EAAtB;AACV;AACA,QAAIQ,WAAW,MAAM,KAAKC,KAAL,CAAWhB,GAAX,EAAgBO,YAAhB,CAArB;;AAEA,QAAIU,WAAJ,EAAiBC,YAAjB,EAA+BC,KAA/B;;AAEA,QAAIf,IAAJ,EAAUA,KAAK,eAAL,EAAsB,EAAEJ,QAAF,EAAOC,SAASM,YAAhB,EAA8BQ,kBAA9B,EAAtB;AACV,QAAIA,SAASN,OAAT,CAAiBW,GAAjB,CAAqB,cAArB,CAAJ,EAA0C;AACxCH,oBAAcF,SAASN,OAAT,CAAiBY,GAAjB,CAAqB,cAArB,CAAd;AACD;;AAED,QAAIJ,eAAeA,YAAYK,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CAAhE,EAAmE;AACjE;AACAJ,qBAAe,MAAMH,SAASQ,IAAT,EAArB;AACA,UAAInB,IAAJ,EAAUA,KAAK,eAAL,EAAsB,EAAEJ,QAAF,EAAOC,SAASM,YAAhB,EAA8BQ,kBAA9B,EAAwCD,MAAMI,YAA9C,EAAtB;AACVC,cAAQvB,iBAAiBsB,YAAjB,CAAR;AACD,KALD,MAKO,IAAI,CAACH,SAASS,EAAd,EAAkB;AACvB;AACAL,cAAQtB,WAAWkB,SAASU,MAAT,CAAgBC,QAAhB,EAAX,CAAR;AACAP,cAAQ,IAAIQ,KAAJ,CAAUR,SAAU,eAAcJ,SAASU,MAAO,IAAGV,SAASa,UAAW,EAAzE,CAAR;AACD;;AAED,QAAIT,KAAJ,EAAW;AACT,UAAIf,IAAJ,EAAUA,KAAK,OAAL,EAAce,KAAd;AACV,YAAMA,KAAN;AACD;;AAED,WAAOD,YAAP;AACD,GAjDD;;AAAA,WAAgCW,QAAhC;AAAA;AAAA;;AAAA,SAAgCA,QAAhC;AAAA","file":"fetchUri.js","sourcesContent":["'use strict'\n\nconst have = require('../have')\nconst getResponseError = require('../getResponseError')\nconst errorsHttp = require('../errorsHttp')\n\nmodule.exports = async function fetchUri (uri, options = {}) {\n  have.strict(arguments, { uri: 'str', options: 'opt Object' })\n\n  let emit = this.emitter ? this.emitter.emit.bind(this.emitter) : null\n  let fetchOptions = {\n    method: options.method || 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include'\n  }\n\n  let authHeader = this.getAuthHeader()\n  if (authHeader) {\n    fetchOptions.headers.Authorization = this.getAuthHeader()\n  }\n\n  if (options.body != null && options.method && options.method !== 'GET') {\n    fetchOptions.body = options.body\n  }\n\n  if (emit) emit('request:start', { uri, options: fetchOptions })\n  /** @type {Response} */\n  let response = await this.fetch(uri, fetchOptions)\n\n  let contentType, responseJson, error\n\n  if (emit) emit('response:head', { uri, options: fetchOptions, response })\n  if (response.headers.has('Content-Type')) {\n    contentType = response.headers.get('Content-Type')\n  }\n\n  if (contentType && contentType.indexOf('application/json') !== -1) {\n    // получение ответа сервера и обработка ошибок API\n    responseJson = await response.json()\n    if (emit) emit('response:body', { uri, options: fetchOptions, response, body: responseJson })\n    error = getResponseError(responseJson)\n  } else if (!response.ok) {\n    // обработка ошибок http\n    error = errorsHttp[response.status.toString()]\n    error = new Error(error || `Http error: ${response.status} ${response.statusText}`)\n  }\n\n  if (error) {\n    if (emit) emit('error', error)\n    throw error\n  }\n\n  return responseJson\n}\n"]}