{"version":3,"sources":["../../src/methods/fetchUri.js"],"names":["have","require","getResponseError","errorsHttp","module","exports","uri","options","strict","fetchOptions","method","headers","credentials","authHeader","getAuthHeader","Authorization","body","fetch","response","contentType","responseJson","error","has","get","indexOf","json","ok","status","toString","Error","statusText","fetchUri"],"mappings":"AAAA;;;;AAEA,IAAMA,OAAOC,QAAQ,SAAR,CAAb;AACA,IAAMC,mBAAmBD,QAAQ,qBAAR,CAAzB;AACA,IAAME,aAAaF,QAAQ,eAAR,CAAnB;;AAEAG,OAAOC,OAAP;AAAA,uDAAiB,iBAAyBC,GAAzB;AAAA,QAA8BC,OAA9B,uEAAwC,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACfP,iBAAKQ,MAAL,QAAuB,EAAEF,KAAK,KAAP,EAAcC,SAAS,YAAvB,EAAvB;;AAEIE,wBAHW,GAGI;AACjBC,sBAAQH,QAAQG,MAAR,IAAkB,KADT;AAEjBC,uBAAS;AACP,gCAAgB;AADT,eAFQ;AAKjBC,2BAAa;AALI,aAHJ;AAWXC,sBAXW,GAWE,KAAKC,aAAL,EAXF;;AAYf,gBAAID,UAAJ,EAAgB;AACdJ,2BAAaE,OAAb,CAAqBI,aAArB,GAAqC,KAAKD,aAAL,EAArC;AACD;;AAED,gBAAIP,QAAQS,IAAR,IAAgB,IAAhB,IAAwBT,QAAQG,MAAhC,IAA0CH,QAAQG,MAAR,KAAmB,KAAjE,EAAwE;AACtED,2BAAaO,IAAb,GAAoBT,QAAQS,IAA5B;AACD;;AAED;AApBe;AAAA,mBAqBM,KAAKC,KAAL,CAAWX,GAAX,EAAgBG,YAAhB,CArBN;;AAAA;AAqBXS,oBArBW;AAuBXC,uBAvBW,WAuBEC,YAvBF,WAuBgBC,KAvBhB;;;AAyBf,gBAAIH,SAASP,OAAT,CAAiBW,GAAjB,CAAqB,cAArB,CAAJ,EAA0C;AACxCH,4BAAcD,SAASP,OAAT,CAAiBY,GAAjB,CAAqB,cAArB,CAAd;AACD;;AA3Bc,kBA6BXJ,eAAeA,YAAYK,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CA7BjD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA+BQN,SAASO,IAAT,EA/BR;;AAAA;AA+BbL,wBA/Ba;;AAgCbC,oBAAQnB,iBAAiBkB,YAAjB,CAAR;;AAhCa,iBAiCTC,KAjCS;AAAA;AAAA;AAAA;;AAAA,kBAiCMA,KAjCN;;AAAA;AAAA;AAAA;;AAAA;AAAA,gBAkCHH,SAASQ,EAlCN;AAAA;AAAA;AAAA;;AAmCb;AACAL,oBAAQlB,WAAWe,SAASS,MAAT,CAAgBC,QAAhB,EAAX,CAAR;;AApCa,iBAqCTP,KArCS;AAAA;AAAA;AAAA;;AAAA,kBAsCL,IAAIQ,KAAJ,CAAUR,KAAV,CAtCK;;AAAA;AAAA,kBAwCL,IAAIQ,KAAJ,kBAAyBX,SAASS,MAAlC,SAA4CT,SAASY,UAArD,CAxCK;;AAAA;AAAA,6CA4CRV,YA5CQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA,WAAgCW,QAAhC;AAAA;AAAA;;AAAA,SAAgCA,QAAhC;AAAA","file":"fetchUri.js","sourcesContent":["'use strict'\n\nconst have = require('../have')\nconst getResponseError = require('../getResponseError')\nconst errorsHttp = require('../errorsHttp')\n\nmodule.exports = async function fetchUri (uri, options = {}) {\n  have.strict(arguments, { uri: 'str', options: 'opt Object' })\n\n  let fetchOptions = {\n    method: options.method || 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include'\n  }\n\n  let authHeader = this.getAuthHeader()\n  if (authHeader) {\n    fetchOptions.headers.Authorization = this.getAuthHeader()\n  }\n\n  if (options.body != null && options.method && options.method !== 'GET') {\n    fetchOptions.body = options.body\n  }\n\n  /** @type {Response} */\n  let response = await this.fetch(uri, fetchOptions)\n\n  let contentType, responseJson, error\n\n  if (response.headers.has('Content-Type')) {\n    contentType = response.headers.get('Content-Type')\n  }\n\n  if (contentType && contentType.indexOf('application/json') !== -1) {\n    // получение ответа сервера и обработка ошибок API\n    responseJson = await response.json()\n    error = getResponseError(responseJson)\n    if (error) { throw error }\n  } else if (!response.ok) {\n    // обработка ошибок http\n    error = errorsHttp[response.status.toString()]\n    if (error) {\n      throw new Error(error)\n    } else {\n      throw new Error(`Http error: ${response.status} ${response.statusText}`)\n    }\n  }\n\n  return responseJson\n}\n"]}